#!/bin/bash

#
# ${HCP_RUN_UTILS}/StructuralPreprocessing/StructuralPreprocessing.CHECK
# Check specified data for completion of structural preprocessing.
# Copyright 2017-2018, The Connectome Coordination Facility
#

g_script_name=$(basename "${0}")

if [ -z "${HCP_RUN_UTILS}" ]; then
	echo "${g_script_name}: ABORTING: HCP_RUN_UTILS environment variable must be set"
	exit 1
fi

source "${HCP_RUN_UTILS}/shlib/log.shlib"  # Logging related functions
source "${HCP_RUN_UTILS}/shlib/utils.shlib"  # Utility functions
log_Msg "HCP_RUN_UTILS: ${HCP_RUN_UTILS}"

usage()
{
	cat <<EOF

Check specified subject data for Structural Preprocessing completeness

Usage: ${g_script_name} PARAMETER..."

PARAMETERs are [ ] = optional; < > = user supplied value
  [--help]                   : show usage information and exit with non-zero return code
   --subject=<subject>       : subject ID (e.g. 100307)
   --classifier=<classifier> : classifier (e.g. 3T, 7T, MR, V1, V2, etc.)
   --working-dir=<dir>       : Working directory in which to place retrieved data
                               and in which to produce results

EOF
}

get_options()
{
	local arguments=($@)

	# initialize global output variables
	unset g_subject
	unset g_classifier
	unset g_fieldmap
	unset g_working_dir
	unset g_verbose

	g_verbose="FALSE"
	
	# parse arguments
	local num_args=${#arguments[@]}
	local argument
	local index=0

	while [ ${index} -lt ${num_args} ]; do
		argument=${arguments[index]}

		case ${argument} in
			--help)
				usage
				exit 1
				;;
			--subject=*)
				g_subject=${argument#*=}
				index=$(( index + 1 ))
				;;
			--classifier=*)
				g_classifier=${argument#*=}
				index=$(( index + 1 ))
				;;
			--fieldmap=*)
				g_fieldmap=${argument#*=}
				index=$(( index + 1 ))
				;;
			--working-dir=*)
				g_working_dir=${argument#*=}
				index=$(( index + 1 ))
				;;
			--verbose)
				g_verbose="TRUE"
				index=$(( index + 1 ))
				;;
			*)
				usage
				log_Err_Abort "unrecognized option ${argument}"
				;;
		esac
	done

	local error_count=0

	# check required parameters
	if [ -z "${g_subject}" ]; then
		log_Err "subject (--subject=) required"
		error_count=$(( error_count + 1 ))
	else
		log_Msg "subject: ${g_subject}"
	fi

	if [ -z "${g_classifier}" ]; then
		log_Err "classifier (--classifier=) required"
		error_count=$(( error_count + 1 ))
	else
		log_Msg "classifier: ${g_classifier}"
	fi

	if [ -z "${g_fieldmap}" ]; then
		log_Err "fieldmap (--fieldmap=) required"
		error_count=$(( error_count + 1 ))
	else
		log_Msg "fieldmap: ${g_fieldmap}"
	fi

	if [ -z "${g_working_dir}" ]; then
		log_Err "working directory (--working-dir=) required"
		error_count=$(( error_count + 1 ))
	else
		log_Msg "working_dir: ${g_working_dir}"
	fi

	log_Msg "verbose: ${g_verbose}"
	
	if [ ${error_count} -gt 0 ]; then
		log_Err_Abort "For usage information, use --help"
	fi
}

main()
{
	show_job_start

	show_platform_info

	get_options "$@"

	log_Msg "Activating Python 3"
	set_g_python_environment
	source activate ${g_python_environment} 2>&1

	mkdir -p ${g_working_dir}/${g_subject}_${g_classifier}/ProcessingInfo
	log_file_name="${g_working_dir}/${g_subject}_${g_classifier}/ProcessingInfo/${g_subject}.${g_classifier}.${g_script_name}.log"
	success_file_name="${g_working_dir}/${g_subject}_${g_classifier}/ProcessingInfo/${g_subject}.${g_classifier}.${g_script_name}.success"

	check_cmd=""
	check_cmd+="${HCP_RUN_UTILS}/lib/ccf/structural_preprocessing/one_subject_completion_checker.py"
	check_cmd+=" --working-dir=${g_working_dir}"
	check_cmd+=" --subject=${g_subject}"
	check_cmd+=" --classifier=${g_classifier}"
	check_cmd+=" --fieldmap=${g_fieldmap}"
	check_cmd+=" --verbose"
	check_cmd+=" --output=${log_file_name}"
	check_cmd+=" --check-all"

	if [ "${g_verbose}" = "TRUE" ]; then
		check_cmd+="  --verbose"
	fi
	
	pushd ${g_working_dir}
	
	rm -f ${log_file_name}
	log_Msg "check_cmd: ${check_cmd}"
	${check_cmd}
	check_cmd_ret_code=$?

	log_Msg "check_cmd_ret_code=${check_cmd_ret_code}"

	if [ "${check_cmd_ret_code}" -eq 0 ]; then
		log_Msg "Completion Check was successful"
		echo "Completion Check was successful" >> ${log_file_name}
		echo "Completion Check was successful" >  ${success_file_name}
		
	else
		log_Msg "Completion Check was unsuccessful"
		echo "Completion Check was unsuccessful" >> ${log_file_name}
		rm -f ${success_file_name}

	fi
	
	log_Msg "Complete"
}

# Invoke the main to get things started
main "$@"
