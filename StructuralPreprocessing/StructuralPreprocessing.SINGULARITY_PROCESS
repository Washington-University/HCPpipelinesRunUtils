#!/bin/bash

#
# ${HCP_RUN_UTILS}/StructuralPreprocessing/StructuralPreprocessing.SINGULARITY_PROCESS
# Run the HCP Structural Preprocessing pipeline scripts for a specified subject data
# Copyright 2017-2018, The Connectome Coordination Facility
#

g_pipeline_name="StructuralPreprocessing"
g_script_name=$(basename "${0}")

if [ -z "${HCP_RUN_UTILS}" ]; then
	echo "${g_script_name}: ABORTING: HCP_RUN_UTILS environment variable must be set"
	exit 1
fi

# Logging related functions
source "${HCP_RUN_UTILS}/shlib/log.shlib"

# Utility functions
source "${HCP_RUN_UTILS}/shlib/utils.shlib"
log_Msg "HCP_RUN_UTILS: ${HCP_RUN_UTILS}"

# Show script usage information
usage()
{
	cat <<EOF

Run the HCP Structural Preprocessing pipeline scripts (PreFreeSurferPipeline.sh, 
FreeSurferPipeline.sh, and PostFreeSurferPipeline.sh) within a Singularity Container.

Usage: StructuralPreprocessing.SINGULARITY_PROCESS <options>

  Options: [ ] = optional, < > = user-supplied-value

  [--help] : show usage information and exit
   --subject=<subject>       : subject ID within study (e.g. 100307)
  [--classifier=<classifier>]: (e.g. 3T, 7T, MR, etc.), defaults to 3T
   --working-dir=<dir>       : Working directory in which to place retrieved data
                               and in which to produce results
   --first-t1w-directory-name=<directory-name>
                             : directory in which first T1w file resides
   --first-t1w-file-name=<file-name>
                             : Name of first T1w file
  [--second-t1w-directory-name=<directory-name>]
                             : directory in which second T1w file resides
  [--second-t1w-file-name=<file-name>]
                             : Name of second T1w file
   --first-t2w-directory-name=<directory-name>
                             : directory in which first T2w file resides
   --first-t2w-file-name=<file-name>
                             : Name of first T2w file
  [--second-t2w-directory-name=<directory-name>]
                             : directory in which second T2w file resides
  [--second-t2w-file-name=<file-name>]
                            : Name of second T2w file
  [--fieldmap-type=<type>]  : <type> values
                              GE: Siemens Gradient Echo Fieldmaps
                              SiemensGradientEcho: Siemens Gradient Echo Fieldmaps (equiv. to GE)
                              SE: Spin Echo Fieldmaps
                              SpinEcho: Spin Echo Fieldmaps (equiv. to SE)
                              NONE: No fieldmaps
                              If unspecified, defaults to GE
  [--seed=<rng-seed>]       : Random number generator seed for recon-all, passed to FreeSurferPipeline.sh script
                              If unspecified, no seed value is passed to the FreeSurferPipeline.sh script.
                              In that case, no seed value is passed to random number generator seed using
                              tools.
  [--brainsize=<brainsize>] : brainsize value passed to the PreFreeSurferPipeline.sh script
                              If unspecified, the default value of 150 is used.

   NB: The following template files are expected to be found in HCPPIPEDIR/global/templates

   --t1template=<name>      : MNI T1w template 
   --t1templatebrain=<name> : Brain extracted MNI T1w template
   --t1template2mm=<name>   : MNI 2mm T1w template
   --t2template=<name>      : MNI T2w template
   --t2templatebrain=<name> : Brain extracted MNI T2w template
   --t2template2mm=<name>   : MNI 2mm T2w template
   --templatemask=<name>    : Brain mask MNI Template
   --template2mmmask=<name> : Brain mask MNI 2mm Template

   NB: The following files are expected to be found in HCPPIPEDIR/global/config

   --fnirtconfig=<name>     : FNIRT 2mm Configuration file
  [--gdcoeffs=<name>]       : Gradient Distortion Coefficients file
                              If not specified, this value defaults to NONE and 
                              no gradient distortion correction is performed.
  [--topupconfig=<name>]    : Configuration file for topup or "NONE" if not used
                              Defaults to "NONE"

EOF
}

# Parse specified command line options and verify that required options are 
# specified. "Return" the options to use in global variables
get_options()
{
	local arguments=($@)

	# initialize global output variables
	unset g_subject
	unset g_working_dir

	unset g_fieldmap_type
	unset g_seed
	unset g_brainsize

	unset g_first_t1w_directory_name
	unset g_first_t1w_file_name

	unset g_second_t1w_directory_name
	unset g_second_t1w_file_name

	unset g_first_t2w_directory_name
	unset g_first_t2w_file_name

	unset g_second_t2w_directory_name
	unset g_second_t2w_file_name

	unset g_classifier

	unset g_t1template
	unset g_t1templatebrain
	unset g_t1template2mm
	unset g_t2template
	unset g_t2templatebrain
	unset g_t2template2mm
	unset g_templatemask
	unset g_template2mmmask

	unset g_fnirtconfig
	
	# set default values
	g_fieldmap_type="GE"
	g_brainsize="150"
	g_classifier="3T"
	g_gdcoeffs="NONE"
	g_topupconfig="NONE"
	g_se_phase_pos="NONE"
	g_se_phase_neg="NONE"
	
	# parse arguments
	local num_args=${#arguments[@]}
	local argument
	local index=0

	while [ ${index} -lt ${num_args} ]; do
		argument=${arguments[index]}

		case ${argument} in
			--help)
				usage
				exit 1
				;;
			--subject=*)
				g_subject=${argument/*=/""}
				index=$(( index + 1 ))
				;;
			--classifier=*)
				g_classifier=${argument/*=/""}
				index=$(( index + 1 ))
				;;
			--working-dir=*)
				g_working_dir=${argument/*=/""}
				index=$(( index + 1 ))
				;;
			--fieldmap-type=*)
				g_fieldmap_type=${argument/*=/""}
				index=$(( index + 1 ))
				;;
			--seed=*)
				g_seed=${argument/*=/""}
				index=$(( index + 1 ))
				;;
			--brainsize=*)
				g_brainsize=${argument/*=/""}
				index=$(( index + 1 ))
				;;
			--first-t1w-directory-name=*)
				g_first_t1w_directory_name=${argument/*=/""}
				index=$(( index + 1 ))
				;;
			--first-t1w-file-name=*)
				g_first_t1w_file_name=${argument/*=/""}
				index=$(( index + 1 ))
				;;
			--second-t1w-directory-name=*)
				g_second_t1w_directory_name=${argument/*=/""}
				index=$(( index + 1 ))
				;;
			--second-t1w-file-name=*)
				g_second_t1w_file_name=${argument/*=/""}
				index=$(( index + 1 ))
				;;
			--first-t2w-directory-name=*)
				g_first_t2w_directory_name=${argument/*=/""}
				index=$(( index + 1 ))
				;;
			--first-t2w-file-name=*)
				g_first_t2w_file_name=${argument/*=/""}
				index=$(( index + 1 ))
				;;
			--second-t2w-directory-name=*)
				g_second_t2w_directory_name=${argument/*=/""}
				index=$(( index + 1 ))
				;;
			--second-t2w-file-name=*)
				g_second_t2w_file_name=${argument/*=/""}
				index=$(( index + 1 ))
				;;
			--t1template=*)
				g_t1template=${argument/*=/""}
				index=$(( index + 1 ))
				;;
			--t1templatebrain=*)
				g_t1templatebrain=${argument/*=/""}
				index=$(( index + 1 ))
				;;
			--t1template2mm=*)
				g_t1template2mm=${argument/*=/""}
				index=$(( index + 1 ))
				;;
			--t2template=*)
				g_t2template=${argument/*=/""}
				index=$(( index + 1 ))
				;;
			--t2templatebrain=*)
				g_t2templatebrain=${argument/*=/""}
				index=$(( index + 1 ))
				;;
			--t2template2mm=*)
				g_t2template2mm=${argument/*=/""}
				index=$(( index + 1 ))
				;;
			--templatemask=*)
				g_templatemask=${argument/*=/""}
				index=$(( index + 1 ))
				;;
			--template2mmmask=*)
				g_template2mmmask=${argument/*=/""}
				index=$(( index + 1 ))
				;;
			--fnirtconfig=*)
				g_fnirtconfig=${argument/*=/""}
				index=$(( index + 1 ))
				;;
			--gdcoeffs=*)
				g_gdcoeffs=${argument/*=/""}
				index=$(( index + 1 ))
				;;
			--topupconfig=*)
				g_topupconfig=${argument/*=/""}
				index=$(( index + 1 ))
				;;
			--se-phase-pos=*)
				g_se_phase_pos=${argument/*=/""}
				index=$(( index + 1 ))
				;;
			--se-phase-neg=*)
				g_se_phase_neg=${argument/*=/""}
				index=$(( index + 1 ))
				;;
			*)
				usage
				log_Err_Abort "unrecognized option: ${argument}"
				;;
		esac
	done

 	local error_count=0

 	# check parameters

	if [ -z "${g_subject}" ]; then
		log_Err "subject (--subject=) required"
		error_count=$(( error_count + 1 ))
	else
		log_Msg "subject: ${g_subject}"
	fi

	if [ -z "${g_classifier}" ]; then
		log_Err "classifier (--classifier=) required"
		error_count=$(( error_count + 1 ))
	else
		log_Msg "classifier: ${g_classifier}"
	fi
	
	if [ -z "${g_working_dir}" ]; then
		log_Err "working directory (--working-dir=) required"
		error_count=$(( error_count + 1 ))
	else
		log_Msg "working directory: ${g_working_dir}"
	fi
	
	if [ -z "${g_fieldmap_type}" ]; then
		log_Err "fieldmap type (--fieldmap-type=) required"
		error_count=$(( error_count + 1 ))
	else
		log_Msg "fieldmap type: ${g_fieldmap_type}"
	fi
	
 	if [[ ("${g_fieldmap_type}" != "GE") && ("${g_fieldmap_type}" != "SiemensGradientEcho") && ("${g_fieldmap_type}" != "SE") && ("${g_fieldmap_type}" != "SpinEcho") && ("${g_fieldmap_type}" != "NONE") ]] ; then
 		log_Err "unrecognized fieldmap type: ${g_fieldmap_type}"
 		error_count=$(( error_count + 1 ))
 	fi

 	if [ ! -z "${g_seed}" ]; then
 		log_Msg "seed: ${g_seed}"
 	fi

	if [ -z "${g_brainsize}" ]; then
 		log_Err "brainsize (--brainsize=) required"
 	else
 		log_Msg "brainsize: ${g_brainsize}"
 	fi

 	if [ -z "${g_first_t1w_directory_name}" ]; then
 		log_Err "first T1w directory name (--first-t1w-directory-name=) required"
 		error_count=$(( error_count + 1 ))
 	else
 		log_Msg "first T1w directory name: ${g_first_t1w_directory_name}"
 	fi
	
 	if [ -z "${g_first_t1w_file_name}" ]; then
 		log_Err "first T1w file name (--first-t1w-file-name=) required"
 		error_count=$(( error_count + 1 ))
	else
 		log_Msg "first T1w file name: ${g_first_t1w_file_name}"
 	fi

 	if [ ! -z "${g_second_t1w_directory_name}" ]; then
 		log_Msg "second T1w directory name: ${g_second_t1w_directory_name}"
 	fi
	
 	if [ ! -z "${g_second_t1w_file_name}" ]; then
 		log_Msg "second T1w file name: ${g_second_t1w_file_name}"
 	fi

 	if [ -z "${g_first_t2w_directory_name}" ]; then
 		log_Err "first T2w directory name (--first-t2w-directory-name=) required"
 		error_count=$(( error_count + 1 ))
 	else
 		log_Msg "first T2w directory name: ${g_first_t2w_directory_name}"
 	fi

 	if [ -z "${g_first_t2w_file_name}" ]; then
 		log_Err "first T2w file name (--first-t2w-file-name=) required"
 		error_count=$(( error_count + 1 ))
 	else
 		log_Msg "first T2w file name: ${g_first_t2w_file_name}"
 	fi

 	if [ ! -z "${g_second_t2w_directory_name}" ]; then
 		log_Msg "second T2w directory name: ${g_first_t2w_directory_name}"
 	fi
	
 	if [ ! -z "${g_second_t2w_file_name}" ]; then
 		log_Msg "second T2w file name: ${g_second_t2w_file_name}"
 	fi

 	if [ -z "${g_t1template}" ]; then
 		log_Err "--t1template= required"
 		error_count=$(( error_count + 1 ))
 	else
 		log_Msg "t1template: ${g_t1template}"
 	fi

	if [ -z "${g_t1templatebrain}" ]; then
		log_Err "--t1templatebrain= required"
		error_count=$(( error_count + 1 ))
	else
		log_Msg "t1templatebrain: ${g_t1templatebrain}"
	fi
	
	if [ -z "${g_t1template2mm}" ]; then
		log_Err "--t1template2mm= required"
		error_count=$(( error_count + 1 ))
	else
		log_Msg "t1template2mm: ${g_t1template2mm}"
	fi
	
	if [ -z "${g_t2template}" ]; then
		log_Err "MNI T2w template (--t2template=) required"
		error_count=$(( error_count + 1 ))
	else
		log_Msg "t2template: ${g_t2template}"
	fi

	if [ -z "${g_t2templatebrain}" ]; then
		log_Err "--t2templatebrain= required"
		error_count=$(( error_count + 1 ))
	else
		log_Msg "t2templatebrain: ${g_t2templatebrain}"
	fi
	
	if [ -z "${g_t2template2mm}" ]; then
		log_Err "--t2template2mm= required"
		error_count=$(( error_count + 1 ))
	else
		log_Msg "t2template2mm: ${g_t2template2mm}"
	fi
	
	if [ -z "${g_templatemask}" ]; then
		log_Err "--templatemask= required"
		error_count=$(( error_count + 1 ))
	else
		log_Msg "templatemask: ${g_templatemask}"
	fi
	
	if [ -z "${g_template2mmmask}" ]; then
		log_Err "--template2mmmask= required"
		error_count=$(( error_count + 1 ))
	else
		log_Msg "template2mmmask: ${g_template2mmmask}"
	fi

	if [ -z "${g_fnirtconfig}" ]; then
		log_Err "--fnirtconfig= required"
		error_count=$(( error_count + 1 ))
	else
		log_Msg "fnirtconfig: ${g_fnirtconfig}"
	fi

	if [ -z "${g_gdcoeffs}" ]; then
		log_Err "--gdcoeffs= required"
		error_count=$(( error_count + 1 ))
	else
		log_Msg "gdcoeffs: ${g_gdcoeffs}"
	fi

	if [ -z "${g_topupconfig}" ]; then
		log_Err "--topupconfig= required"
		error_count=$(( error_count + 1 ))
	else
		log_Msg "topupconfig: ${g_topupconfig}"
	fi

	if [ -z "${g_se_phase_pos}" ]; then
		log_Err "--se-phase-pos= required"
		error_count=$(( error_count + 1 ))
	else
		log_Msg "se_phase_pos: ${g_se_phase_pos}"
	fi

	if [ -z "${g_se_phase_neg}" ]; then
		log_Err "--se-phase-neg= required"
		error_count=$(( error_count + 1 ))
	else
		log_Msg "se_phase_neg: ${g_se_phase_neg}"
	fi

 	if [ ${error_count} -gt 0 ]; then
 		log_Err_Abort "For usage information, use --help"
 	fi
}

# "base" of file name for first T1w scan
FIRST_T1W_FILE_NAME_BASE="T1w_MPR1"

# "base" of file name for second T1w scan
SECOND_T1W_FILE_NAME_BASE="T1w_MPR2"

# "base" of file name for first T2w scan
FIRST_T2W_FILE_NAME_BASE="T2w_SPC1"

# "base" of file name for second T2w scan
SECOND_T2W_FILE_NAME_BASE="T2w_SPC2"

# file name extension for compressed NIFTI fiiles
COMPRESSED_NIFTI_EXTENSION=".nii.gz"

# part of file name that indicates a Siemens Gradient Echo Magnitude Fieldmap file
MAG_FIELDMAP_NAME="FieldMap_Magnitude"

# part of file name that indicates a Siemens Gradient Echo Phase Fieldmap file
PHASE_FIELDMAP_NAME="FieldMap_Phase"

first_t1w_scan_fullpath()
{
	echo "${g_working_dir}/${g_subject}/unprocessed/${g_classifier}/${g_first_t1w_directory_name}/${g_first_t1w_file_name}"
}

second_t1w_scan_fullpath()
{
	echo "${g_working_dir}/${g_subject}/unprocessed/${g_classifier}/${g_second_t1w_directory_name}/${g_second_t1w_file_name}"
}

first_t2w_scan_fullpath()
{
	echo "${g_working_dir}/${g_subject}/unprocessed/${g_classifier}/${g_first_t2w_directory_name}/${g_first_t2w_file_name}"
}

second_t2w_scan_fullpath()
{
	echo "${g_working_dir}/${g_subject}/unprocessed/${g_classifier}/${g_second_t2w_directory_name}/${g_second_t2w_file_name}"
}

siemens_mag_fieldmap_fullpath()
{
	echo "${g_working_dir}/${g_subject}/unprocessed/${g_classifier}/${g_first_t1w_directory_name}/${g_subject}_${g_classifier}_${MAG_FIELDMAP_NAME}${COMPRESSED_NIFTI_EXTENSION}"
}

siemens_phase_fieldmap_fullpath()
{
	echo "${g_working_dir}/${g_subject}/unprocessed/${g_classifier}/${g_first_t1w_directory_name}/${g_subject}_${g_classifier}_${PHASE_FIELDMAP_NAME}${COMPRESSED_NIFTI_EXTENSION}"
}

spin_echo_phase_pos_fullpath()
{
	echo "${g_working_dir}/${g_subject}/unprocessed/${g_classifier}/${g_first_t1w_directory_name}/${g_se_phase_pos}"
}

spin_echo_phase_neg_fullpath()
{
	echo "${g_working_dir}/${g_subject}/unprocessed/${g_classifier}/${g_first_t1w_directory_name}/${g_se_phase_neg}"
}

does_first_t1w_scan_exist()
{
	local first_t1w_scan_file=$(first_t1w_scan_fullpath)
	log_Dbg "first_t1w_scan_file: ${first_t1w_scan_file}"

	if [ -z "${g_first_t1w_directory_name}" ]; then
		echo "FALSE"
	elif [ -z "${g_first_t1w_file_name}" ]; then
		echo "FALSE"
	elif [ -e "${first_t1w_scan_file}" ]; then
		echo "TRUE"
	else
		echo "FALSE"
	fi
}

does_second_t1w_scan_exist()
{
	local second_t1w_scan_file=$(second_t1w_scan_fullpath)
	log_Dbg "second_t1w_scan_file: ${second_t1w_scan_file}"

	if [ -z "${g_second_t1w_directory_name}" ]; then
		echo "FALSE"
	elif [ -z "${g_second_t1w_file_name}" ]; then
		echo "FALSE"
	elif [ -e "${second_t1w_scan_file}" ]; then
		echo "TRUE"
	else
		echo "FALSE"
	fi
}

does_first_t2w_scan_exist()
{
	local first_t2w_scan_file=$(first_t2w_scan_fullpath)
	log_Dbg "first_t2w_scan_file: ${first_t2w_scan_file}"

	if [ -z "${g_first_t2w_directory_name}" ]; then
		echo "FALSE"
	elif [ -z "${g_first_t2w_file_name}" ]; then
		echo "FALSE"
	elif [ -e "${first_t2w_scan_file}" ]; then
		echo "TRUE"
	else
		echo "FALSE"
	fi
}

does_second_t2w_scan_exist()
{
	local second_t2w_scan_file=$(second_t2w_scan_fullpath)
	log_Dbg "second_t2w_scan_file: ${second_t2w_scan_file}"

	if [ -z "${g_second_t2w_directory_name}" ]; then
		echo "FALSE"
	elif [ -z "${g_second_t2w_file_name}" ]; then
		echo "FALSE"
	elif [ -e "${second_t2w_scan_file}" ]; then
		echo "TRUE"
	else
		echo "FALSE"
	fi
}

get_parameters_for_first_t1w_scan() 
{
	g_first_t1w_sample_spacing=""
	g_first_t1w_deltaTE=""
	g_first_t1w_positive_dwell_time=""

	local first_t1w_file
	first_t1w_file=$(first_t1w_scan_fullpath)

	g_first_t1w_sample_spacing=$(${HCP_RUN_UTILS}/lib/utils/get_json_meta_data.sh -f ${first_t1w_file} -k DwellTime)
	log_Msg "g_first_t1w_sample_spacing: ${g_first_t1w_sample_spacing}"
	
	if [ -z "${g_first_t1w_sample_spacing}" ] ; then
		log_Msg "We WERE NOT able to get the first t1w sample spacing value from a sidecar JSON file"
		exit 1
	else
		log_Msg "We WERE able to get the first t1w sample spacing value from a sidecar JSON file"
		sample_spacing_in_secs=`echo "${g_first_t1w_sample_spacing}" | awk '{printf "%.9f", $1}'`
		log_Msg "sample_spacing_in_secs: ${sample_spacing_in_secs}"
	
		g_first_t1w_sample_spacing=${sample_spacing_in_secs}
		log_Msg "g_first_t1w_sample_spacing: ${g_first_t1w_sample_spacing}"
		
	fi

	if [[ ("${g_fieldmap_type}" = "GE") || ("${g_fieldmap_type}" = "SiemensGradientEcho") ]] ; then

		# We don't yet have a sample JSON sidecar file from a Siemens magnitude fieldmap file.
		# So the field name of "deltaTE" used below is just a guess.
		local mag_fieldmap_name
		mag_fieldmap_name=$(siemens_mag_fieldmap_fullpath)
		g_first_t1w_deltaTE=$(${HCP_RUN_UTILS}/lib/utils/get_json_meta_data.sh -f ${mag_fieldmap_name} -k deltaTE)
		log_Msg "g_first_t1w_deltaTE: ${g_first_t1w_deltaTE}"

	elif [[ ("${g_fieldmap_type}" = "SE") || ("${g_fieldmap_type}" = "SpinEcho") ]] ; then
		local se_phase_pos_file
		se_phase_pos_file=$(spin_echo_phase_pos_fullpath)
		g_first_t1w_positive_dwell_time=$(${HCP_RUN_UTILS}/lib/utils/get_json_meta_data.sh -f ${se_phase_pos_file} -k EffectiveEchoSpacing)
		log_Msg "g_first_t1w_positive_dwell_time: ${g_first_t1w_positive_dwell_time}"

	fi
}

get_parameters_for_first_t2w_scan()
{
	g_first_t2w_sample_spacing=""

	local first_t2w_file
	first_t2w_file=$(first_t2w_scan_fullpath)

	g_first_t2w_sample_spacing=$(${HCP_RUN_UTILS}/lib/utils/get_json_meta_data.sh -f ${first_t2w_file} -k DwellTime)
	log_Msg "g_first_t2w_sample_spacing: ${g_first_t2w_sample_spacing}"

	if [ -z "${g_first_t2w_sample_spacing}" ] ; then
		log_Msg "We WERE NOT able to get the first t2w sample spacing value from a sidecar JSON file"
		echo "g_first_t2w_sample_spacing: NONE"
		exit 1
		
	else
		log_Msg "We WERE able to get the first t2w sample spacing value from a sidecar JSON file"
	
		sample_spacing_in_secs=`echo "${g_first_t2w_sample_spacing}" | awk '{printf "%.9f", $1}'`
		log_Msg "sample_spacing_in_secs: ${sample_spacing_in_secs}"
	
		g_first_t2w_sample_spacing=${sample_spacing_in_secs}
		log_Msg "g_first_t2w_sample_spacing: ${g_first_t2w_sample_spacing}"
	fi
}

do_gradient_echo_field_maps_exist()
{
	magnitude_fieldmaps=`find ${g_working_dir}/${g_subject}/unprocessed/${g_classifier}/T[1-2]w* -maxdepth 1 -name "*${MAG_FIELDMAP_NAME}*"`
	phase_fieldmaps=`find ${g_working_dir}/${g_subject}/unprocessed/${g_classifier}/T[1-2]w* -maxdepth 1 -name "*${PHASE_FIELDMAP_NAME}*"`

	if [ -z "${magnitude_fieldmaps}" ] ; then
		echo "FALSE"
	elif [ -z "${phase_fieldmaps}" ] ; then
		echo "FALSE"
	else
		echo "TRUE"
	fi
}

# Main processing
main()
{
	log_Debug_On

	local UNWARPDIR="z"
	local SEUNWARPDIR="y"
	
	show_job_start

	show_platform_info
	
	get_options "$@"

	log_execution_info ${g_working_dir} "${g_script_name}" ${g_subject}

	create_start_time_file ${g_working_dir} ${g_pipeline_name} ${g_subject}

	if [ -z "${HCPPIPEDIR}" ]; then
		log_Err_Abort "HCPPIPEDIR environment variable must be set"
	else
		log_Msg "HCPPIPEDIR: ${HCPPIPEDIR}"
	fi
	
	source_script ${HCP_RUN_UTILS}/ToolSetupScripts/epd-python_setup.sh

	# determine what files exist and get parameters needed
	first_T1w_scan_exists=$(does_first_t1w_scan_exist)
	log_Msg "first_T1w_scan_exists: ${first_T1w_scan_exists}"
	
	if [ "${first_T1w_scan_exists}" = "TRUE" ] ; then
		get_parameters_for_first_t1w_scan
	fi
	
	second_T1w_scan_exists=$(does_second_t1w_scan_exist)
	log_Msg "second_T1w_scan_exists: ${second_T1w_scan_exists}"

	first_T2w_scan_exists=$(does_first_t2w_scan_exist)
	log_Msg "first_T2w_scan_exists: ${first_T2w_scan_exists}"

	if [ "${first_T2w_scan_exists}" = "TRUE" ] ; then
		get_parameters_for_first_t2w_scan
	fi

	second_T2w_scan_exists=$(does_second_t2w_scan_exist)
	log_Msg "second_T2w_scan_exists: ${second_T2w_scan_exists}"

	gradient_echo_field_maps_exist=$(do_gradient_echo_field_maps_exist)
	log_Msg "gradient_echo_field_maps_exist: ${gradient_echo_field_maps_exist}"

	# build specification of T1w scans

	t1_spec=""
		
	if [ "${first_T1w_scan_exists}" = "TRUE" ]; then
		t1_spec+=$(first_t1w_scan_fullpath)
	else
		log_Err_Abort "NO FIRST T1W SCAN"
	fi

 	if [ "${second_T1w_scan_exists}" = "TRUE" ]; then
		t1_spec+=@
		t1_spec+=$(second_t1w_scan_fullpath)
 	fi

 	log_Msg "t1_spec: ${t1_spec}"

	# build specification of T2w scans
 	t2_spec=""

 	if [ "${first_T2w_scan_exists}" = "TRUE" ]; then
 		t2_spec+=$(first_t2w_scan_fullpath)
 	else
 		log_Err_Abort "NO FIRST T2W SCAN"
 	fi

 	if [ "${second_T2w_scan_exists}" = "TRUE" ]; then
 		t2_spec+=@
		t2_spec+=$(second_t2w_scan_fullpath)
	fi
	
 	log_Msg "t2_spec: ${t2_spec}"

	# Run the PreFreeSurferPipeline.sh script
 	PreFreeSurfer_cmd=""
 	PreFreeSurfer_cmd+="${HCPPIPEDIR}/PreFreeSurfer/PreFreeSurferPipeline.sh"
 	PreFreeSurfer_cmd+=" --path=${g_working_dir}"
 	PreFreeSurfer_cmd+=" --subject=${g_subject}"
 	PreFreeSurfer_cmd+=" --t1=${t1_spec}"
 	PreFreeSurfer_cmd+=" --t2=${t2_spec}"
	PreFreeSurfer_cmd+=" --t1template=${HCPPIPEDIR}/global/templates/${g_t1template}"
	PreFreeSurfer_cmd+=" --t1templatebrain=${HCPPIPEDIR}/global/templates/${g_t1templatebrain}"
 	PreFreeSurfer_cmd+=" --t1template2mm=${HCPPIPEDIR}/global/templates/${g_t1template2mm}"
	PreFreeSurfer_cmd+=" --t2template=${HCPPIPEDIR}/global/templates/${g_t2template}"
 	PreFreeSurfer_cmd+=" --t2templatebrain=${HCPPIPEDIR}/global/templates/${g_t2templatebrain}"
 	PreFreeSurfer_cmd+=" --t2template2mm=${HCPPIPEDIR}/global/templates/${g_t2template2mm}"
	PreFreeSurfer_cmd+=" --templatemask=${HCPPIPEDIR}/global/templates/${g_templatemask}"
	PreFreeSurfer_cmd+=" --template2mmmask=${HCPPIPEDIR}/global/templates/${g_template2mmmask}"
	PreFreeSurfer_cmd+=" --fnirtconfig=${HCPPIPEDIR}/global/config/${g_fnirtconfig}"

	if [ "${g_gdcoeffs}" = "NONE" ]; then
		PreFreeSurfer_cmd+=" --gdcoeffs=${g_gdcoeffs}"
	else
		PreFreeSurfer_cmd+=" --gdcoeffs=${HCPPIPEDIR}/global/config/${g_gdcoeffs}"
	fi

	PreFreeSurfer_cmd+=" --brainsize=${g_brainsize}"

	if [[ ("${g_fieldmap_type}" == "GE") || ("${g_fieldmap_type}" == "SiemensGradientEcho") ]] ; then
		# add parameters for Siemens Gradient Echo fieldmap usage
		log_Msg "add parameters for Siemens Gradient Echo fieldmap usage"

		log_Msg "gradient_echo_field_maps_exist: ${gradient_echo_field_maps_exist}"
		if [[ "${gradient_echo_field_maps_exist}" == "TRUE" ]] ; then
			log_Msg "adding parameters for when Siemens gradient echo fieldmaps should be used and do exist"
			PreFreeSurfer_cmd+=" --echodiff=${g_first_t1w_deltaTE}"
			PreFreeSurfer_cmd+=" --t1samplespacing=${g_first_t1w_sample_spacing}"
			PreFreeSurfer_cmd+=" --t2samplespacing=${g_first_t2w_sample_spacing}"
			PreFreeSurfer_cmd+=" --avgrdcmethod=FIELDMAP"
			PreFreeSurfer_cmd+=" --topupconfig=NONE"
			PreFreeSurfer_cmd+=" --fmapmag=$(siemens_mag_fieldmap_fullpath)"
			PreFreeSurfer_cmd+=" --fmapphase=$(siemens_phase_fieldmap_fullpath)"
			PreFreeSurfer_cmd+=" --unwarpdir=${UNWARPDIR}"
		else
			log_Msg "adding parameters for when Siemens gradient echo fieldmaps should be used but do NOT exist"
			PreFreeSurfer_cmd+=" --echodiff=NONE"
			PreFreeSurfer_cmd+=" --t1samplespacing=NONE"
			PreFreeSurfer_cmd+=" --t2samplespacing=NONE"
			PreFreeSurfer_cmd+=" --avgrdcmethod=NONE"
			PreFreeSurfer_cmd+=" --topupconfig=NONE"
			PreFreeSurfer_cmd+=" --fmapmag=$(siemens_mag_fieldmap_fullpath)"
			PreFreeSurfer_cmd+=" --fmapphase=$(siemens_phase_fieldmap_fullpath)"
			PreFreeSurfer_cmd+=" --unwarpdir=${UNWARPDIR}"
		fi
	elif [[ ("${g_fieldmap_type}" == "SE") || ("${g_fieldmap_type}" == "SpinEcho") ]] ; then
		# add parameters for SpinEcho fieldmap usage
		PreFreeSurfer_cmd+=" --echodiff=NONE"
		PreFreeSurfer_cmd+=" --t1samplespacing=${g_first_t1w_sample_spacing}"
		PreFreeSurfer_cmd+=" --t2samplespacing=${g_first_t2w_sample_spacing}"
		PreFreeSurfer_cmd+=" --avgrdcmethod=TOPUP"
		PreFreeSurfer_cmd+=" --SEPhaseNeg=$(spin_echo_phase_neg_fullpath)"
		PreFreeSurfer_cmd+=" --SEPhasePos=$(spin_echo_phase_pos_fullpath)"
		PreFreeSurfer_cmd+=" --seechospacing=${g_first_t1w_positive_dwell_time}"
		PreFreeSurfer_cmd+=" --topupconfig=${HCPPIPEDIR}/global/config/${g_topupconfig}"
		PreFreeSurfer_cmd+=" --seunwarpdir=${SEUNWARPDIR}"
		PreFreeSurfer_cmd+=" --unwarpdir=${UNWARPDIR}"
	else
		log_Err_Abort "Unrecognized g_fieldmap_type: ${g_fieldmap_type}"
	fi

	log_Msg ""
	log_Msg "PreFreeSurfer_cmd: ${PreFreeSurfer_cmd}"
	log_Msg ""
	
	pushd ${g_working_dir}
	${PreFreeSurfer_cmd}
	return_code=$?
	if [ ${return_code} -ne 0 ]; then
		log_Err_Abort "PreFreeSurferPipeline.sh non-zero return code: ${return_code}"
	fi
	popd

	# Run FreeSurferPipeline.sh script
 	FreeSurfer_cmd=""
	FreeSurfer_cmd+="${HCPPIPEDIR}/FreeSurfer/FreeSurferPipeline.sh"
	FreeSurfer_cmd+=" --subject=${g_subject}"
	FreeSurfer_cmd+=" --subjectDIR=${g_working_dir}/${g_subject}/T1w"
	FreeSurfer_cmd+=" --t1=${g_working_dir}/${g_subject}/T1w/T1w_acpc_dc_restore.nii.gz"
	FreeSurfer_cmd+=" --t1brain=${g_working_dir}/${g_subject}/T1w/T1w_acpc_dc_restore_brain.nii.gz"
	FreeSurfer_cmd+=" --t2=${g_working_dir}/${g_subject}/T1w/T2w_acpc_dc_restore.nii.gz"

	if [ ! -z "${g_seed}" ]; then
		FreeSurfer_cmd+=" --seed=${g_seed}"
	fi

	log_Msg ""
	log_Msg "FreeSurfer_cmd: ${FreeSurfer_cmd}"
	log_Msg ""
	
	pushd ${g_working_dir}
	${FreeSurfer_cmd}
	return_code=$?
	if [ ${return_code} -ne 0 ]; then
		log_Err_Abort "FreeSurferPipeline.sh non-zero return code: ${return_code}"
	fi
	popd

	# Run PostFreeSurferPipeline.sh script
 	PostFreeSurfer_cmd=""
	PostFreeSurfer_cmd+="${HCPPIPEDIR}/PostFreeSurfer/PostFreeSurferPipeline.sh"
	PostFreeSurfer_cmd+=" --path=${g_working_dir}"
	PostFreeSurfer_cmd+=" --subject=${g_subject}"
	PostFreeSurfer_cmd+=" --surfatlasdir=${HCPPIPEDIR}/global/templates/standard_mesh_atlases/"
	PostFreeSurfer_cmd+=" --grayordinatesdir=${HCPPIPEDIR}/global/templates/91282_Greyordinates"
	PostFreeSurfer_cmd+=" --grayordinatesres=2"
	PostFreeSurfer_cmd+=" --hiresmesh=164"
	PostFreeSurfer_cmd+=" --lowresmesh=32"
	PostFreeSurfer_cmd+=" --subcortgraylabels=${HCPPIPEDIR}/global/config/FreeSurferSubcorticalLabelTableLut.txt"
	PostFreeSurfer_cmd+=" --freesurferlabels=${HCPPIPEDIR}/global/config/FreeSurferAllLut.txt"
	PostFreeSurfer_cmd+=" --refmyelinmaps=${HCPPIPEDIR}/global/templates/standard_mesh_atlases/Conte69.MyelinMap_BC.164k_fs_LR.dscalar.nii"
	PostFreeSurfer_cmd+=" --regname=MSMSulc"

	log_Msg ""
	log_Msg "PostFreeSurfer_cmd: ${PostFreeSurfer_cmd}"
	log_Msg ""
	
	pushd ${g_working_dir}
	${PostFreeSurfer_cmd}
	return_code=$?
	if [ ${return_code} -ne 0 ]; then
		log_Err_Abort "PostFreeSurferPipeline.sh non-zero return code: ${return_code}"
	fi
	popd

	cp -rL ${g_working_dir}/${g_subject}/T1w/fsaverage ${g_working_dir}/${g_subject}/T1w/fsaverage1
	rm ${g_working_dir}/${g_subject}/T1w/fsaverage
	mv ${g_working_dir}/${g_subject}/T1w/fsaverage1 ${g_working_dir}/${g_subject}/T1w/fsaverage
	
	
	log_Msg "Complete"
}

# Invoke the main function to get things started
main "$@"
